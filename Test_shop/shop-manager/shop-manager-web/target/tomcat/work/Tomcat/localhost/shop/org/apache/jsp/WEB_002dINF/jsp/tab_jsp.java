/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2018-04-17 08:13:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tab_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n");
      out.write("  <title>Navbar组件</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/plugins/layui/css/layui.css\" media=\"all\">\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/build/css/doc.css\" media=\"all\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"kit-doc\">\r\n");
      out.write("  <blockquote class=\"layui-elem-quote\">Tab组件是基于<a href=\"http://www.layui.com/doc/element/tab.html\" target=\"_blank\">layui选项卡</a> 封装的组件，配合\r\n");
      out.write("    <a href=\"navbar.html\">Navbar组件</a>能完成多开页面的操作</blockquote>\r\n");
      out.write("  <div class=\"kit-doc-title\">\r\n");
      out.write("    <fieldset>\r\n");
      out.write("      <legend><a name=\"blockquote\">可用的方法</a></legend>\r\n");
      out.write("    </fieldset>\r\n");
      out.write("  </div>\r\n");
      out.write("  <table class=\"layui-table\">\r\n");
      out.write("    <colgroup>\r\n");
      out.write("      <col width=\"150\">\r\n");
      out.write("      <col width=\"200\">\r\n");
      out.write("      <col width=\"150\">\r\n");
      out.write("      <col>\r\n");
      out.write("    </colgroup>\r\n");
      out.write("    <thead>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <th>名称</th>\r\n");
      out.write("      <th>参数</th>\r\n");
      out.write("      <th>返回值</th>\r\n");
      out.write("      <th>描述</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    </thead>\r\n");
      out.write("    <tbody>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>set(options)</td>\r\n");
      out.write("      <td><a href=\"#options\">options</a>/object</td>\r\n");
      out.write("      <td>this/object</td>\r\n");
      out.write("      <td>配置一些全局参数,返回当前tab对象，以便于链式调用\r\n");
      out.write("        <p>Example:</p>\r\n");
      out.write("                        <pre class=\"layui-code\">\r\n");
      out.write("tab.set({\r\n");
      out.write("    elem:'#container'\r\n");
      out.write("});</pre>\r\n");
      out.write("      </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>render()</td>\r\n");
      out.write("      <td>null</td>\r\n");
      out.write("      <td>void</td>\r\n");
      out.write("      <td>渲染tab选项卡到页面</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>tabAdd(params)</td>\r\n");
      out.write("      <td>params/object</td>\r\n");
      out.write("      <td>void</td>\r\n");
      out.write("      <td>添加一个选项卡\r\n");
      out.write("        <p>Example:</p>\r\n");
      out.write("                        <pre class=\"layui-code\">\r\n");
      out.write("tab.tabAdd({\r\n");
      out.write("    icon:'fa-user',\r\n");
      out.write("    id:'11',\r\n");
      out.write("    title:'新选项卡',\r\n");
      out.write("    url:'newtab.html'\r\n");
      out.write("});</pre> 与navbar配合着用\r\n");
      out.write("        <p>Example:</p>\r\n");
      out.write("                        <pre class=\"layui-code\">\r\n");
      out.write("navbar.bind(function(data) {//bind方法为navbar组件提供的方法\r\n");
      out.write("    tab.tabAdd(data);\r\n");
      out.write("});</pre>\r\n");
      out.write("      </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    </tbody>\r\n");
      out.write("  </table>\r\n");
      out.write("  <div class=\"kit-doc-title\">\r\n");
      out.write("    <fieldset>\r\n");
      out.write("      <legend><a name=\"blockquote\" id=\"options\">options参数说明</a></legend>\r\n");
      out.write("    </fieldset>\r\n");
      out.write("  </div>\r\n");
      out.write("  <table class=\"layui-table\">\r\n");
      out.write("    <colgroup>\r\n");
      out.write("      <col width=\"150\">\r\n");
      out.write("      <col width=\"150\">\r\n");
      out.write("      <col width=\"150\">\r\n");
      out.write("      <col>\r\n");
      out.write("    </colgroup>\r\n");
      out.write("    <thead>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <th>名称</th>\r\n");
      out.write("      <th>类型</th>\r\n");
      out.write("      <td>默认值</td>\r\n");
      out.write("      <th>描述</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    </thead>\r\n");
      out.write("    <tbody>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>elem</td>\r\n");
      out.write("      <td>string</td>\r\n");
      out.write("      <td>#container</td>\r\n");
      out.write("      <td>容器DOM，支持id选择器和类选择器</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>mainUrl</td>\r\n");
      out.write("      <td>string</td>\r\n");
      out.write("      <td>main.html</td>\r\n");
      out.write("      <td>控制面板的链接</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>onSwitch</td>\r\n");
      out.write("      <td>function</td>\r\n");
      out.write("      <td>undefined</td>\r\n");
      out.write("      <td>选择卡切换时将触发该事件<br/> 示例:\r\n");
      out.write("                        <pre class=\"layui-code\">\r\n");
      out.write("tab.set({\r\n");
      out.write("    onSwitch: function(data) { //选项卡切换时触发\r\n");
      out.write("        //console.log(data.layId); //lay-id值\r\n");
      out.write("        //console.log(data.index); //得到当前Tab的所在下标\r\n");
      out.write("        //console.log(data.elem); //得到当前的Tab大容器\r\n");
      out.write("}});                        </pre>\r\n");
      out.write("      </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>closeBefore</td>\r\n");
      out.write("      <td>function</td>\r\n");
      out.write("      <td>undefined</td>\r\n");
      out.write("      <td>关闭选项卡之前触发该事件<br/> 示例:\r\n");
      out.write("                        <pre class=\"layui-code\">\r\n");
      out.write("tab.set({\r\n");
      out.write("    closeBefore: function(data) { //关闭选项卡之前触发\r\n");
      out.write("        // console.log(data);\r\n");
      out.write("        // console.log(data.icon); //显示的图标\r\n");
      out.write("        // console.log(data.id); //lay-id\r\n");
      out.write("        // console.log(data.title); //显示的标题\r\n");
      out.write("        // console.log(data.url); //跳转的地址\r\n");
      out.write("        return true; //返回true则关闭\r\n");
      out.write("}});                        </pre>\r\n");
      out.write("      </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    </tbody>\r\n");
      out.write("  </table>\r\n");
      out.write("  <blockquote class=\"layui-elem-quote\">这个文档就先写到这里吧，后面新增了再补充啦。</blockquote>\r\n");
      out.write("</div>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/plugins/layui/layui.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
